const axiosRetry = require('axios-retry');
import Axios from 'axios';
import { correlationIdFromResponse } from './Correlation';
import { Endpoint } from './Enums';
/**
 * Creates hydrated HotLoopSdk instances
 */
class HotLoopSdkFactory {
    /**
     * Get a hydrated HotLoopSdk instance
     * @param token The HotLoop API token
     * @param opts The SDK options
     */
    static getInstance(token, opts) {
        const url = 'https://europe-west3-hotloop-289416.cloudfunctions.net/';
        return new HotLoop(url, token, opts);
    }
}
/**
 * The HotLoop SDK implementation
 */
class HotLoop {
    /**
     * @constructor
     * @param url The base URL for the HotLoop API
     * @param token The user's bearer token
     * @param opts The options required to configure the SDK
     */
    constructor(url, token, opts) {
        const config = {
            baseURL: url,
            timeout: opts.timeout || 5000,
            headers: {
                'Accept': 'application/json; charset=utf-8',
                'Authorization': `Bearer ${token}`,
                'User-Agent': opts.userAgent || 'hotloop-sdk'
            }
        };
        this.axios = Axios.create(config);
        const retryConfig = {
            retries: opts.retries || 3,
            retryDelay: retryCount => retryCount * (opts.retryDelay || 1000)
        };
        axiosRetry(this.axios, retryConfig);
    }
    /**
     * @inheritDoc
     */
    syncDeployment(options) {
        return this.axios.post(Endpoint.SYNC_DEPLOYMENT, options)
            .then(correlationIdFromResponse);
    }
    /**
     * @inheritDoc
     */
    syncCoverage(options) {
        return this.axios.post(Endpoint.SYNC_COVERAGE, options)
            .then(correlationIdFromResponse);
    }
}
export { HotLoop, HotLoopSdkFactory };
//# sourceMappingURL=HotLoop.js.map