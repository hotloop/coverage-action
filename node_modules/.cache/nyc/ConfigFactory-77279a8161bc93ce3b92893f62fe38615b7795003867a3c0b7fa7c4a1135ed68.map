{"version":3,"file":"/Users/shaunegan/dev/hotloop.io/coverage-action/src/ConfigFactory.ts","sources":["/Users/shaunegan/dev/hotloop.io/coverage-action/src/ConfigFactory.ts"],"names":[],"mappings":";;;AAEA,sCAA+C;AAE/C,yBAAmC;AAUnC;IAAA;IAwBA,CAAC;IAvBe,iBAAG,GAAjB,UAAmB,OAAsB,EAAE,aAAsB;QAC/D,IAAM,OAAO,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAA;QAClC,IAAM,GAAG,GAAW,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,CAAA;QACnD,IAAM,UAAU,GAAW,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,CAAA;QAC1D,IAAM,OAAO,GAAmB,aAAa,CAAC,OAAO,CAAA;QAErD,IAAI,GAAG,KAAK,EAAE;YAAE,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAA;QACvE,IAAI,UAAU,KAAK,EAAE;YAAE,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAA;QAC9E,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ;YAAE,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC,CAAA;QAEnH,OAAO,aAAM,CAAC,UAAU,CAAC;aACtB,IAAI,CAAC,UAAC,OAAgB,IAAK,OAAA,OAAO,CAAC,IAAI,EAAE,EAAd,CAAc,CAAC;aAC1C,IAAI,CAAC,UAAC,KAAe,IAAK,OAAA,aAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAArB,CAAqB,CAAC;aAChD,IAAI,CAAC,UAAC,MAAc,IAAM,OAAA,CAAC;YAC1B,GAAG,KAAA;YACH,OAAO,EAAE;gBACP,IAAI,EAAE,MAAM,CAAC,QAAQ,EAAE;gBACvB,UAAU,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI;gBACnE,MAAM,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;gBACrF,WAAW,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI;aACvE;SACS,CAAA,EARe,CAQf,CAAC,CAAA;IACjB,CAAC;IACH,oBAAC;AAAD,CAAC,AAxBD,IAwBC;AAEQ,sCAAa","sourcesContent":["import { InputOptions } from '@actions/core'\nimport { Context } from '@actions/github/lib/context'\nimport { create, Globber } from '@actions/glob'\nimport { WebhookPayload } from '@actions/github/lib/interfaces'\nimport { promises as fs } from 'fs'\nimport { SyncCoverageOptions } from '@hotloop/hotloop-sdk'\n\ninterface Config {\n  key: string\n  options: SyncCoverageOptions\n}\n\ntype InputFunction = (name: string, options?: InputOptions) => string\n\nclass ConfigFactory {\n  public static get (inputFn: InputFunction, githubContext: Context): Promise<Config> {\n    const options = { required: true }\n    const key: string = inputFn('hotloop-key', options)\n    const reportPath: string = inputFn('report-path', options)\n    const context: WebhookPayload = githubContext.payload\n\n    if (key === '') return Promise.reject(new Error('invalid hotloop key'))\n    if (reportPath === '') return Promise.reject(new Error('invalid report path'))\n    if (!context.repository || !context.repository.html_url) return Promise.reject(new Error('invalid github context'))\n\n    return create(reportPath)\n      .then((globber: Globber) => globber.glob())\n      .then((files: string[]) => fs.readFile(files[0]))\n      .then((report: Buffer ) => ({\n        key,\n        options: {\n          lcov: report.toString(),\n          repository: context.repository ? context.repository.html_url : null,\n          branch: context.pull_request ? context.pull_request.head.ref : context.ref.substr(11),\n          issueNumber: context.pull_request ? context.pull_request.number : null\n        }\n      } as Config))\n  }\n}\n\nexport { ConfigFactory, InputFunction, Config }\n"]}